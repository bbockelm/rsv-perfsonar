#!/usr/bin/python                                                                                                                                                                  
#import perfsonar_simple_local_probe                                                                                                                                               
#import perfsonar_basic_probe                                                                                                                                                      
 
from perfsonar_basic_probe import *

#sys.path.insert(0, '.')                      
class PerfsonarEsmondProbe(PerfsonarSimpleProbe):
    """
    Probe that reads from a perfsonar and posts it to an esmond central data store
    """
    def __init__(self):
        PerfsonarSimpleProbe.__init__(self)
        metric = rsvprobe.RSVMetric("Perfsonar-Monitor",
                                    "org.osg.general.perfsonar-simple", rsvprobe.RSVMetric.STATUS)
        self.config_file = os.path.join(self.conf_dir, self.supported_metrics[0].name)
        self.supported_metrics = [metric]
        
    
    def runCallerScript(self):
        cmd = "source ./esmondCaller.sh %s %d %s %s %s %s %s %s %s %s %s %s %s %s %s" % (self.host, int(self.start), 
                                                                       self.username, self.key, self.goc_url, self.debug, self.soft_timeout, self.summaries, self.allowedEvents, self.x509usercert, self.x509userkey, self.directoryqueue, self.tmpdirectory, self.allowedMQEvents, self.maxMQmessageSize)
        #self.add_message("Command call %s" % cmd)
        ec, out = rsvprobe.run_command(cmd, workdir="/usr/libexec/rsv/probes/worker-scripts")
        return out


def main():
    probe = PerfsonarEsmondProbe()
    return probe.run()

if __name__ == '__main__':
    sys.exit(main())
    
